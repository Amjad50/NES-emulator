extern crate cpu6502;

use cpu6502::instruction::Instruction;

// These instructions are not supported at the moment
const DOES_NOT_EXIST: [u8; 105] = [
    0x80, 0x02, 0x12, 0x22, 0x32, 0x42, 0x52, 0x62, 0x72, 0x82, 0x92, 0xB2, 0xC2, 0xD2, 0xE2, 0xF2,
    0x03, 0x13, 0x23, 0x33, 0x43, 0x53, 0x63, 0x73, 0x83, 0x93, 0xA3, 0xB3, 0xC3, 0xD3, 0xE3, 0xF3,
    0x04, 0x14, 0x34, 0x44, 0x54, 0x64, 0x74, 0xD4, 0xF4, 0x07, 0x17, 0x27, 0x37, 0x47, 0x57, 0x67,
    0x77, 0x87, 0x97, 0xA7, 0xB7, 0xC7, 0xD7, 0xE7, 0xF7, 0x89, 0x1A, 0x3A, 0x5A, 0x7A, 0xDA, 0xFA,
    0x0B, 0x1B, 0x2B, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B, 0x8B, 0x9B, 0xAB, 0xBB, 0xCB, 0xDB, 0xEB, 0xFB,
    0x0C, 0x1C, 0x3C, 0x5C, 0x7C, 0x9C, 0xDC, 0xFC, 0x9E, 0x0F, 0x1F, 0x2F, 0x3F, 0x4F, 0x5F, 0x6F,
    0x7F, 0x8F, 0x9F, 0xAF, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF,
];

#[test]
fn existing_instructions() {
    let mut exists = [0xFF; 256 - DOES_NOT_EXIST.len()];
    let mut i = 0;
    // build the inverse of `DOES_NOT_EXIST`
    for byte in 0..=255 {
        if !DOES_NOT_EXIST.contains(&byte) {
            exists[i] = byte;
            i += 1;
        }
    }

    for &byte in exists.iter() {
        Instruction::from_byte(byte);
    }
}

#[test]
fn nonexisting_instructions() {
    for &byte in DOES_NOT_EXIST.iter() {
        let result = std::panic::catch_unwind(|| Instruction::from_byte(byte));
        assert!(result.is_err());
    }
}
